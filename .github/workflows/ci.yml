name: Build

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'LICENSE'
      - 'ext/**'
      - '**.md'
      - '**/.gitignore'
      #- '**/.dockerignore'
      - '**/docker-compose.yml'
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Whether to deploy DockerHub and GHCR'
        required: true
        default: '0'
permissions:
      contents: read
      packages: write

jobs:
  build-and-push:
    #if: "!contains(github.event.head_commit.message, 'do-not-build')"
    runs-on: ubuntu-24.04
    concurrency:
      group: ${{ matrix.BUILD_CONTEXT }}
      cancel-in-progress: true
    env:
      TZ: Asia/Taipei
    strategy:
      fail-fast: false
      matrix:
        include:
          # redis
          - BUILD_CONTEXT: db/redis
            TARGET_PLATFORMS: linux/amd64,linux/arm64
          # mariadb
          - BUILD_CONTEXT: db/mariadb
            TARGET_PLATFORMS: linux/amd64,linux/arm64
          # valkey
          - BUILD_CONTEXT: db/valkey
            TARGET_PLATFORMS: linux/amd64,linux/arm64
          # wireguard
          - BUILD_CONTEXT: net/wireguard
            TARGET_PLATFORMS: linux/amd64,linux/arm64
          # tinyfecvpn
          - BUILD_CONTEXT: net/tinyfecvpn
            TARGET_PLATFORMS: linux/amd64,linux/arm64
          # phantun
          - BUILD_CONTEXT: net/phantun
            TARGET_PLATFORMS: linux/amd64,linux/arm64
          # udp2raw
          - BUILD_CONTEXT: net/udp2raw
            TARGET_PLATFORMS: linux/amd64,linux/arm64
          # nginx
          - BUILD_CONTEXT: net/nginx
            TARGET_PLATFORMS: linux/amd64,linux/arm64
          # netspeeder
          - BUILD_CONTEXT: net/netspeeder
            TARGET_PLATFORMS: linux/amd64,linux/arm64
          # webdav
          - BUILD_CONTEXT: utils/webdav
            TARGET_PLATFORMS: linux/amd64,linux/arm64
          # webdav-client
          - BUILD_CONTEXT: utils/webdav-client
            TARGET_PLATFORMS: linux/amd64,linux/arm64
          # nextcloud
          - BUILD_CONTEXT: utils/nextcloud
            TARGET_PLATFORMS: linux/amd64,linux/arm64
          # rsync
          - BUILD_CONTEXT: utils/rsync
            TARGET_PLATFORMS: linux/amd64,linux/arm64
          # alist
          - BUILD_CONTEXT: utils/alist
            TARGET_PLATFORMS: linux/amd64,linux/arm64
          # transmission
          #- BUILD_CONTEXT: utils/transmission
          #  TARGET_PLATFORMS: linux/amd64,linux/arm64
          # acme.sh
          - BUILD_CONTEXT: utils/acme.sh
            TARGET_PLATFORMS: linux/amd64,linux/arm64
          # lsi-sas
          - BUILD_CONTEXT: utils/lsi-sas
            TARGET_PLATFORMS: linux/amd64,linux/arm64
          # samba
          - BUILD_CONTEXT: utils/samba
            TARGET_PLATFORMS: linux/amd64,linux/arm64
    steps:
      # prepare
      - name: Checkout
        uses: actions/checkout@v4

      # check change
      - name: Check context change
        run: |
          git fetch origin ${{ github.event.ref }} --depth=2

          PREVIOUS_COMMIT=${{ github.event.before }}
          echo "DEBUG: PREVIOUS_COMMIT initial = $PREVIOUS_COMMIT"

          if [ -z "$PREVIOUS_COMMIT" ] || [ "$PREVIOUS_COMMIT" = "0000000000000000000000000000000000000000" ]; then
            PREVIOUS_COMMIT="HEAD^"
            echo "DEBUG: PREVIOUS_COMMIT fallback to HEAD^"
          fi

          echo "DEBUG: Using PREVIOUS_COMMIT = $PREVIOUS_COMMIT"

          CHANGED_FILES=$(git diff --name-only "$PREVIOUS_COMMIT" "${{ github.sha }}" | grep -E "^${{ matrix.BUILD_CONTEXT }}(/|$)" || true)
          echo "DEBUG: Build context = ${{ matrix.BUILD_CONTEXT }}"
          echo "DEBUG: Changed files matching context:"
          echo "$CHANGED_FILES"

          if [ -z "$CHANGED_FILES" ]; then
            echo "CONTEXT_CHANGED=false" >> $GITHUB_ENV
            echo "DEBUG: CONTEXT_CHANGED set to false"
          else
            echo "CONTEXT_CHANGED=true" >> $GITHUB_ENV
            echo "DEBUG: CONTEXT_CHANGED set to true"
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.TARGET_PLATFORMS }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set environment variables
        run: |
          echo "BUILD_TAG=$(basename ${{ matrix.BUILD_CONTEXT }})" >> $GITHUB_ENV

      # login
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
         registry: ghcr.io
         username: ${{ github.repository_owner }}
         password: ${{ secrets.GITHUB_TOKEN }}

      # cache
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ env.BUILD_TAG }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-${{ env.BUILD_TAG }}-buildx-

      # build & push
      - name: Build image and Push to Container Registries
        uses: docker/build-push-action@v5
        if: ${{ github.event.inputs.deploy == '1' || (github.event_name == 'push' && env.CONTEXT_CHANGED == 'true') }}
        with:
          context: ${{ matrix.BUILD_CONTEXT }}
          tags: |
            ${{ github.repository }}:${{ env.BUILD_TAG }}
            ghcr.io/${{ github.repository }}:${{ env.BUILD_TAG }}
          platforms: ${{ matrix.TARGET_PLATFORMS }}
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
